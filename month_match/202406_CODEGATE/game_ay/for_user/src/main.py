from parse import parse_file, parse_source
from interp import Machines
from model import *
import threading 
import base64

codes = [Statements(statements=[FunctionDeclaration(name=Name(value='shuffleDeck'),arguments=[Parameter(name=Name(value='deck'),type=TypeName(name='list'))],return_type=TypeName(name='void'),body=Statements(statements=[VarDeclaration(name=Name(value='i'),type=TypeName(name='int'),value=Sub(left=FunctionCall(name=Name(value='len'),arguments=[Name(value='deck')]),right=Integer(value='1'))), VarDeclaration(name=Name(value='temp'),type=TypeName(name='list'),value=Indexer(value=Name(value='deck'),start=Name(value='i'),end=None,step=None)), VarDeclaration(name=Name(value='j'),type=TypeName(name='int'),value=Integer(value='0')), WhileStatement(test=Gt(left=Name(value='i'),right=Integer(value='0')),body=Statements(statements=[ExprAsStatement(expression=Assignment(location=Name(value='j'),value=FunctionCall(name=Name(value='rand'),arguments=[Name(value='i')]))), ExprAsStatement(expression=Assignment(location=Name(value='temp'),value=Indexer(value=Name(value='deck'),start=Name(value='i'),end=None,step=None))), ExprAsStatement(expression=Assignment(location=Indexer(value=Name(value='deck'),start=Name(value='i'),end=None,step=None),value=Indexer(value=Name(value='deck'),start=Name(value='j'),end=None,step=None))), ExprAsStatement(expression=Assignment(location=Indexer(value=Name(value='deck'),start=Name(value='j'),end=None,step=None),value=Name(value='temp'))), ExprAsStatement(expression=Assignment(location=Name(value='i'),value=Sub(left=Name(value='i'),right=Integer(value='1'))))]))])), FunctionDeclaration(name=Name(value='initializeDeck'),arguments=[],return_type=TypeName(name='list'),body=Statements(statements=[VarDeclaration(name=Name(value='suits'),type=TypeName(name='list'),value=Array(elements=[Integer(value='0'), Integer(value='1'), Integer(value='2'), Integer(value='3')])), VarDeclaration(name=Name(value='ranks'),type=TypeName(name='list'),value=Array(elements=[Str(value="'2'"), Str(value="'3'"), Str(value="'4'"), Str(value="'5'"), Str(value="'6'"), Str(value="'7'"), Str(value="'8'"), Str(value="'9'"), Str(value="'10'"), Str(value="'J'"), Str(value="'Q'"), Str(value="'K'"), Str(value="'A'")])), VarDeclaration(name=Name(value='deck'),type=TypeName(name='list'),value=Array(elements=[])), VarDeclaration(name=Name(value='suitIndex'),type=TypeName(name='int'),value=Integer(value='0')), VarDeclaration(name=Name(value='rankIndex'),type=TypeName(name='int'),value=Integer(value='0')), WhileStatement(test=Lt(left=Name(value='suitIndex'),right=Integer(value='4')),body=Statements(statements=[ExprAsStatement(expression=Assignment(location=Name(value='rankIndex'),value=Integer(value='0'))), WhileStatement(test=Lt(left=Name(value='rankIndex'),right=Integer(value='13')),body=Statements(statements=[ExprAsStatement(expression=FunctionCall(name=Name(value='append'),arguments=[Name(value='deck'), Array(elements=[Indexer(value=Name(value='ranks'),start=Name(value='rankIndex'),end=None,step=None), Indexer(value=Name(value='suits'),start=Name(value='suitIndex'),end=None,step=None)])])), ExprAsStatement(expression=Assignment(location=Name(value='rankIndex'),value=Add(left=Name(value='rankIndex'),right=Integer(value='1'))))])), ExprAsStatement(expression=Assignment(location=Name(value='suitIndex'),value=Add(left=Name(value='suitIndex'),right=Integer(value='1'))))])), ExprAsStatement(expression=FunctionCall(name=Name(value='shuffleDeck'),arguments=[Name(value='deck')])), ReturnStatement(value=Name(value='deck'))])), FunctionDeclaration(name=Name(value='dealCards'),arguments=[Parameter(name=Name(value='deck'),type=TypeName(name='list'))],return_type=TypeName(name='list'),body=Statements(statements=[VarDeclaration(name=Name(value='hands'),type=TypeName(name='list'),value=Array(elements=[])), VarDeclaration(name=Name(value='index'),type=TypeName(name='int'),value=Integer(value='0')), VarDeclaration(name=Name(value='count'),type=TypeName(name='int'),value=Integer(value='0')), VarDeclaration(name=Name(value='playerHand'),type=TypeName(name='list'),value=Array(elements=[])), WhileStatement(test=Lt(left=Name(value='count'),right=Integer(value='2')),body=Statements(statements=[ExprAsStatement(expression=Assignment(location=Name(value='playerHand'),value=Array(elements=[]))), VarDeclaration(name=Name(value='cardCount'),type=TypeName(name='int'),value=Integer(value='0')), WhileStatement(test=Lt(left=Name(value='cardCount'),right=Integer(value='2')),body=Statements(statements=[ExprAsStatement(expression=FunctionCall(name=Name(value='append'),arguments=[Name(value='playerHand'), Indexer(value=Name(value='deck'),start=Name(value='index'),end=None,step=None)])), ExprAsStatement(expression=Assignment(location=Name(value='index'),value=Add(left=Name(value='index'),right=Integer(value='1')))), ExprAsStatement(expression=Assignment(location=Name(value='cardCount'),value=Add(left=Name(value='cardCount'),right=Integer(value='1'))))])), ExprAsStatement(expression=FunctionCall(name=Name(value='append'),arguments=[Name(value='hands'), Name(value='playerHand')])), ExprAsStatement(expression=Assignment(location=Name(value='count'),value=Add(left=Name(value='count'),right=Integer(value='1'))))])), ReturnStatement(value=Name(value='hands'))])), FunctionDeclaration(name=Name(value='replaceCards'),arguments=[Parameter(name=Name(value='playerHand'),type=TypeName(name='list')), Parameter(name=Name(value='deck'),type=TypeName(name='list')), Parameter(name=Name(value='cardsToReplace'),type=TypeName(name='list'))],return_type=TypeName(name='void'),body=Statements(statements=[VarDeclaration(name=Name(value='replacementIndex'),type=TypeName(name='int'),value=Sub(left=FunctionCall(name=Name(value='len'),arguments=[Name(value='deck')]),right=Integer(value='1'))), VarDeclaration(name=Name(value='i'),type=TypeName(name='int'),value=Integer(value='0')), WhileStatement(test=Lt(left=Name(value='i'),right=FunctionCall(name=Name(value='len'),arguments=[Name(value='cardsToReplace')])),body=Statements(statements=[IfStatement(test=Indexer(value=Name(value='cardsToReplace'),start=Name(value='i'),end=None,step=None),consequence=Statements(statements=[ExprAsStatement(expression=Assignment(location=Indexer(value=Name(value='playerHand'),start=Name(value='i'),end=None,step=None),value=Indexer(value=Name(value='deck'),start=Name(value='replacementIndex'),end=None,step=None))), ExprAsStatement(expression=Assignment(location=Name(value='replacementIndex'),value=Sub(left=Name(value='replacementIndex'),right=Integer(value='1'))))]),alternative=None,elif_block=[]), ExprAsStatement(expression=Assignment(location=Name(value='i'),value=Add(left=Name(value='i'),right=Integer(value='1'))))]))])), FunctionDeclaration(name=Name(value='scoreHand'),arguments=[Parameter(name=Name(value='hand'),type=TypeName(name='list'))],return_type=TypeName(name='int'),body=Statements(statements=[VarDeclaration(name=Name(value='score'),type=TypeName(name='int'),value=Integer(value='0')), VarDeclaration(name=Name(value='i'),type=TypeName(name='int'),value=Integer(value='0')), VarDeclaration(name=Name(value='temp'),type=TypeName(name='list'),value=Array(elements=[])), VarDeclaration(name=Name(value='cardValue'),type=TypeName(name='str'),value=Str(value="''")), WhileStatement(test=Lt(left=Name(value='i'),right=FunctionCall(name=Name(value='len'),arguments=[Name(value='hand')])),body=Statements(statements=[ExprAsStatement(expression=Assignment(location=Name(value='temp'),value=Indexer(value=Name(value='hand'),start=Name(value='i'),end=None,step=None))), ExprAsStatement(expression=Assignment(location=Name(value='cardValue'),value=Indexer(value=Name(value='temp'),start=Integer(value='0'),end=None,step=None))), IfStatement(test=Eq(left=Name(value='cardValue'),right=Str(value="'A'")),consequence=Statements(statements=[IfStatement(test=Gt(left=Group(value=Add(left=Name(value='score'),right=Integer(value='11'))),right=Integer(value='21')),consequence=Statements(statements=[ExprAsStatement(expression=Assignment(location=Name(value='score'),value=Add(left=Name(value='score'),right=Integer(value='1'))))]),alternative=Statements(statements=[ExprAsStatement(expression=Assignment(location=Name(value='score'),value=Add(left=Name(value='score'),right=Integer(value='11'))))]),elif_block=[])]),alternative=Statements(statements=[ExprAsStatement(expression=Assignment(location=Name(value='score'),value=Add(left=Name(value='score'),right=FunctionCall(name=Name(value='int'),arguments=[Name(value='cardValue')]))))]),elif_block=[(LogOr(left=LogOr(left=Eq(left=Name(value='cardValue'),right=Str(value="'K'")),right=Eq(left=Name(value='cardValue'),right=Str(value="'Q'"))),right=Eq(left=Name(value='cardValue'),right=Str(value="'J'"))), Statements(statements=[ExprAsStatement(expression=Assignment(location=Name(value='score'),value=Add(left=Name(value='score'),right=Integer(value='10'))))]))]), ExprAsStatement(expression=Assignment(location=Name(value='i'),value=Add(left=Name(value='i'),right=Integer(value='1'))))])), ReturnStatement(value=Name(value='score'))])), FunctionDeclaration(name=Name(value='determineWinner'),arguments=[Parameter(name=Name(value='playerHand'),type=TypeName(name='list')), Parameter(name=Name(value='dealerHand'),type=TypeName(name='list'))],return_type=TypeName(name='int'),body=Statements(statements=[VarDeclaration(name=Name(value='playerScore'),type=TypeName(name='int'),value=FunctionCall(name=Name(value='scoreHand'),arguments=[Name(value='playerHand')])), VarDeclaration(name=Name(value='dealerScore'),type=TypeName(name='int'),value=FunctionCall(name=Name(value='scoreHand'),arguments=[Name(value='dealerHand')])), IfStatement(test=Gt(left=Name(value='playerScore'),right=Name(value='dealerScore')),consequence=Statements(statements=[ReturnStatement(value=Integer(value='1'))]),alternative=Statements(statements=[ReturnStatement(value=Integer(value='0'))]),elif_block=[(Gt(left=Name(value='dealerScore'),right=Name(value='playerScore')), Statements(statements=[ReturnStatement(value=Integer(value='2'))]))])])), FunctionDeclaration(name=Name(value='Draw_result'),arguments=[],return_type=TypeName(name='bool'),body=Statements(statements=[PrintStatement(value=Str(value="'\\nDraw\\n'"))])), FunctionDeclaration(name=Name(value='Player_result'),arguments=[],return_type=TypeName(name='bool'),body=Statements(statements=[PrintStatement(value=Str(value="'\\nPlayer Win\\n'"))])), FunctionDeclaration(name=Name(value='Dealer_result'),arguments=[],return_type=TypeName(name='bool'),body=Statements(statements=[PrintStatement(value=Str(value="'\\nDealer Win\\n'"))])), FunctionDeclaration(name=Name(value='get_user_input'),arguments=[],return_type=TypeName(name='list'),body=Statements(statements=[VarDeclaration(name=Name(value='replace_input'),type=TypeName(name='list'),value=Array(elements=[])), VarDeclaration(name=Name(value='i'),type=TypeName(name='int'),value=Integer(value='0')), WhileStatement(test=Lt(left=Name(value='i'),right=Integer(value='2')),body=Statements(statements=[VarDeclaration(name=Name(value='choice'),type=TypeName(name='bytes'),value=FunctionCall(name=Name(value='input'),arguments=[Add(left=Add(left=Str(value="'Swap Card ['"),right=FunctionCall(name=Name(value='str'),arguments=[Name(value='i')])),right=Str(value="'] [y/n]:'"))])), IfStatement(test=Eq(left=Name(value='choice'),right=Bytes(value="b'y'")),consequence=Statements(statements=[ExprAsStatement(expression=FunctionCall(name=Name(value='append'),arguments=[Name(value='replace_input'), Integer(value='1')]))]),alternative=Statements(statements=[ExprAsStatement(expression=FunctionCall(name=Name(value='append'),arguments=[Name(value='replace_input'), Integer(value='0')]))]),elif_block=[]), ExprAsStatement(expression=Assignment(location=Name(value='i'),value=Add(left=Name(value='i'),right=Integer(value='1'))))])), ReturnStatement(value=Name(value='replace_input'))])), FunctionDeclaration(name=Name(value='ShowCard'),arguments=[Parameter(name=Name(value='card'),type=TypeName(name='list'))],return_type=TypeName(name='bool'),body=Statements(statements=[VarDeclaration(name=Name(value='i'),type=TypeName(name='int'),value=Integer(value='0')), VarDeclaration(name=Name(value='c'),type=TypeName(name='list'),value=None), VarDeclaration(name=Name(value='level'),type=TypeName(name='str'),value=None), VarDeclaration(name=Name(value='suits'),type=TypeName(name='list'),value=Array(elements=[Str(value="'Hearts'"), Str(value="'Diamonds'"), Str(value="'Clubs'"), Str(value="'Spades'")])), WhileStatement(test=Lt(left=Name(value='i'),right=FunctionCall(name=Name(value='len'),arguments=[Name(value='card')])),body=Statements(statements=[ExprAsStatement(expression=Assignment(location=Name(value='c'),value=Indexer(value=Name(value='card'),start=Name(value='i'),end=None,step=None))), PrintStatement(value=Add(left=Add(left=Add(left=Add(left=Add(left=Add(left=Add(left=Str(value="'\\t'"),right=Str(value="'['")),right=FunctionCall(name=Name(value='str'),arguments=[Name(value='i')])),right=Str(value="'] '")),right=Indexer(value=Name(value='c'),start=Integer(value='0'),end=None,step=None)),right=Str(value="' of '")),right=Indexer(value=Name(value='suits'),start=Indexer(value=Name(value='c'),start=Integer(value='1'),end=None,step=None),end=None,step=None)),right=Str(value="'\\n'"))), ExprAsStatement(expression=Assignment(location=Name(value='i'),value=Add(left=Name(value='i'),right=Integer(value='1'))))]))])), FunctionDeclaration(name=Name(value='main'),arguments=[],return_type=TypeName(name='int'),body=Statements(statements=[WhileStatement(test=Integer(value='1'),body=Statements(statements=[VarDeclaration(name=Name(value='func_list'),type=TypeName(name='list'),value=Array(elements=[Name(value='Draw_result'), Name(value='Player_result'), Name(value='Dealer_result')])), VarDeclaration(name=Name(value='beh'),type=TypeName(name='list'),value=Array(elements=[])), VarDeclaration(name=Name(value='beh_func'),type=TypeName(name='pointer'),value=None), ExprAsStatement(expression=FunctionCall(name=Name(value='pwrite'),arguments=[Integer(value='0'), Name(value='func_list')])), VarDeclaration(name=Name(value='deck'),type=TypeName(name='list'),value=FunctionCall(name=Name(value='initializeDeck'),arguments=[])), VarDeclaration(name=Name(value='hands'),type=TypeName(name='list'),value=FunctionCall(name=Name(value='dealCards'),arguments=[Name(value='deck')])), VarDeclaration(name=Name(value='playerHand'),type=TypeName(name='list'),value=Indexer(value=Name(value='hands'),start=Integer(value='0'),end=None,step=None)), VarDeclaration(name=Name(value='dealerHand'),type=TypeName(name='list'),value=Indexer(value=Name(value='hands'),start=Integer(value='1'),end=None,step=None)), PrintStatement(value=Str(value="'[Dealer]\\n'")), ExprAsStatement(expression=FunctionCall(name=Name(value='ShowCard'),arguments=[Name(value='dealerHand')])), PrintStatement(value=Str(value="'\\n[Player]\\n'")), ExprAsStatement(expression=FunctionCall(name=Name(value='ShowCard'),arguments=[Name(value='playerHand')])), PrintStatement(value=Group(value=Str(value="'\\n'"))), VarDeclaration(name=Name(value='cardsToReplace'),type=TypeName(name='list'),value=FunctionCall(name=Name(value='get_user_input'),arguments=[])), ExprAsStatement(expression=FunctionCall(name=Name(value='replaceCards'),arguments=[Name(value='playerHand'), Name(value='deck'), Name(value='cardsToReplace')])), PrintStatement(value=Str(value="'\\n[Dealer]\\n'")), ExprAsStatement(expression=FunctionCall(name=Name(value='ShowCard'),arguments=[Name(value='dealerHand')])), PrintStatement(value=Str(value="'\\n[Player - Card changed]\\n'")), ExprAsStatement(expression=FunctionCall(name=Name(value='ShowCard'),arguments=[Name(value='playerHand')])), VarDeclaration(name=Name(value='winner'),type=TypeName(name='int'),value=FunctionCall(name=Name(value='determineWinner'),arguments=[Name(value='playerHand'), Name(value='dealerHand')])), ExprAsStatement(expression=Assignment(location=Name(value='beh'),value=FunctionCall(name=Name(value='pread'),arguments=[Integer(value='0')]))), ExprAsStatement(expression=Assignment(location=Name(value='beh_func'),value=Indexer(value=Name(value='beh'),start=Name(value='winner'),end=None,step=None))), ExprAsStatement(expression=FunctionCall(name=Name(value='beh_func'),arguments=[])), ExprAsStatement(expression=FunctionCall(name=Name(value='sleep'),arguments=[Float(value='3.0')])), ExprAsStatement(expression=FunctionCall(name=Name(value='pwrite'),arguments=[Integer(value='0'), Name(value='func_list')]))]))])), ExprAsStatement(expression=FunctionCall(name=Name(value='main'),arguments=[]))])]

def code_builder(code):
    return parse_source(code) 

def machine_run(m:Machines, nodes, machine_id):
    m.set_program(machine_id, nodes)
    m.run_program(machine_id)

# python3 -u main.py 

MAX_MACHINE_COUNT = 5
def main():
    m = Machines(machine_count=MAX_MACHINE_COUNT)

    ascii_art = """
           (`-')  _ <-. (`-')   (`-')  _  ,-.    (`-')  _            
    .->    (OO ).-/    \\(OO )_  ( OO).-/.-|-|-.  (OO ).-/      .->   
 ,---(`-') / ,---.  ,--./  ,-.)(,------.| | |_|  / ,---.   ,--.'  ,-.
'  .-(OO ) | \\ /`.\ |   `.'   | |  .---'`-|.| '. | \\ /`.\ (`-')'.'  /
|  | .-, \\ '-'|_.' ||  |'.'|  |(|  '--. .-| |  | '-'|_.' |(OO \\    / 
|  | '.(_/(|  .-.  ||  |   |  | |  .--' | |-|  /(|  .-.  | |  /   /) 
|  '-'  |  |  | |  ||  |   |  | |  `---. `|-|''  |  | |  | `-/   /`  
 `-----'   `--' `--'`--'   `--' `------'  `-'    `--' `--'   `--'    
"""

    print(ascii_art)
    while True:
        command = input("Command [all|add|exit|run|del]:")
        if command == "all":
            thread_1 = threading.Thread(target = machine_run, args = (m, codes[0], 0))
            thread_1.start() 

            for i in range(1, len(codes)):
                thread_2 = threading.Thread(target = machine_run, args = (m, codes[i], i))
                thread_2.start()
            thread_1.join()

        if command == "run":
            index = int(input(f"Enter index [0:{len(codes)-1}]:"))
            if index >= len(codes) or index < 0:
                print("Invalid index")
                continue
            thread = threading.Thread(target = machine_run, args = (m, codes[index], index))
            thread.start()
            thread.join()

        elif command == 'add':
            if len(codes) == MAX_MACHINE_COUNT:
                print("Cannot add more machines")
                continue
            
            print("\n[!] Create your own game or plugin and unleash your creativity.")
            code = input("Enter code (base64):")
            code = base64.b64decode(code).decode()
            nodes = code_builder(code)
            codes.append(nodes)
        
        elif command == 'del':
            index = int(input(f"Enter index [1:{len(codes)-1}]:"))
            if index >= len(codes) or index < 0:
                print("Invalid index")
                continue

            if index == 0:
                print("Cannot delete main code")
            else:
                codes.pop(index)
            
        elif command == "exit":
            break


if __name__ == "__main__":
    main()
    # run_code()